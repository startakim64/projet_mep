pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M3"
        jdk "jdk11"
        nodejs "nodejs10ng10"
    
    }

 parameters {
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch of the Java project')
		string(name: 'BRANCHDB', defaultValue: 'dev4', description: 'Git branch of the db')
		string(name: 'BRANCHFR', defaultValue: 'master', description: 'Git branch of the front')
		string(name: 'BACKEND_BASE_URL', defaultValue: 'http://192.168.1.35:8080/api', description: 'url to connect the back to front')
    }


    stages {
        stage('compile Back App') {
            steps {
                // Get some code from a GitHub repository
                git branch: "${params.BRANCH}", 
                    url:'https://github.com/matthcol/movieapijava2021.git'

                // Run Maven on a Unix agent.
                sh "mvn clean compile"

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }


        }
       
		
		
		stage('test Back App') {
            steps {

                // Run Maven on a Unix agent.
                sh "mvn test"


            }
            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results.
                always {
                    junit '**/target/surefire-reports/TEST-*.xml'
                    
                }
            }

        }
        
		
		
		stage('Package Back App') {
            steps {
               

                // Run Maven on a Unix agent.
                sh "mvn -DskipTests package"


            }

            post {
                
                success {

                    archiveArtifacts 'target/*.jar'
					sh "cp target/movieapp.jar /home/srvadmin/RepoArtifacts/`date +%Y%m%d`-movieapp.jar"

                }
            }
        }
		
		
		
        stage('Build Front App') {
            steps {
                git branch: "${params.BRANCHFR}", 
                    url:'https://github.com/matthcol/movie_angular.git'


					sh 'echo backend will be set to ${params.BACKEND_BASE_URL}'
				// change backend in prod environment file
					sh 'sed -i "s#BACKEND_BASE_URL#${params.BACKEND_BASE_URL}#" src/environments/environment.prod.ts'
				
				
                sh "npm ci"
                sh "ng build --prod"
            }
        }
        
		
		
		
		
		
		
		
		
		
		stage('publish Back App') {
			steps {
				script {
					withCredentials([sshUserPrivateKey(credentialsId: 'ssh_server_deploy', keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'userName')]) {
						def remote = [:]
						remote.name = 'test'
						remote.host = '192.168.1.23'
						remote.port = 22
						remote.allowAnyHosts = true
						remote.timoutSec = 3000
						
						remote.user = userName
						remote.identityFile = identity
						remote.passphrase = passphrase


						sshPut remote: remote, from: "target/movieapp.jar", into: '/home/srvadmin/test'
						
					}
				}
			}
		}
		
		
		
		stage('publish Front App') {
			steps {
				script {
					withCredentials([sshUserPrivateKey(credentialsId: 'ssh_server_deploy', keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'userName')]) {
						def remote = [:]
						remote.name = 'test'
						remote.host = '192.168.1.23'
						remote.port = 22
						remote.allowAnyHosts = true
						remote.timoutSec = 3000
						
						remote.user = userName
						remote.identityFile = identity
						remote.passphrase = passphrase


						sshPut remote: remote, from: "dist/*", into: '/home/srvadmin/test'

					}
				}
			}
		}
		
		
		
		
		
		stage('publish Script db') {
            steps {
                // Get some code from a GitHub repository
                
				git branch: "${params.BRANCHDB}", 
                    url:'https://github.com/matthcol/dbmovie.git'

				script {
					withCredentials([sshUserPrivateKey(credentialsId: 'ssh_server_deploy', keyFileVariable: 'identity', passphraseVariable: 'passphrase', usernameVariable: 'userName')]) {
						def remote = [:]
						remote.name = 'test'
						remote.host = '192.168.1.23'
						remote.port = 22
						remote.allowAnyHosts = true
						remote.timoutSec = 3000
						
						remote.user = userName
						remote.identityFile = identity
						remote.passphrase = passphrase


						sshPut remote: remote, from: ".", filterRegex: /\.sql$/, into: '/home/srvadmin/Deploy/PlaybookTEST/roles/install_databasemy/files'
						sshPut remote: remote, from: ".", filterRegex: /\.sql$/, into: '/home/srvadmin/Deploy/PlaybookTEST/roles/install_databasepg/files'
					}
				}




            }
	
		}
	}
	
}
